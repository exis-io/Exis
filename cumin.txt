// Straight Boilerplate-- make the compiler happy
import Foundation

public extension RiffleSession {
	public func register(pdid: String, _ fn: () -> ())  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CN>(pdid: String, _ fn: (A) -> ())  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CL where A.Generator.Element : CN>(pdid: String, _ fn: (A) -> ())  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<R: CN>(pdid: String, _ fn: () -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<R: CL where R.Generator.Element : CN>(pdid: String, _ fn: () -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CN, R: CN>(pdid: String, _ fn: (A) -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CN, R: CL where R.Generator.Element : CN>(pdid: String, _ fn: (A) -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CL, R: CN where A.Generator.Element : CN>(pdid: String, _ fn: (A) -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func register<A: CL, R: CL where A.Generator.Element : CN, R.Generator.Element : CN>(pdid: String, _ fn: (A) -> (R))  {
		_register(pdid, fn: cumin(fn))
	}

	public func subscribe(pdid: String, _ fn: () -> ())  {
		_subscribe(pdid, fn: cumin(fn))
	}

	public func subscribe<A: CN>(pdid: String, _ fn: (A) -> ())  {
		_subscribe(pdid, fn: cumin(fn))
	}

	public func subscribe<A: CL where A.Generator.Element : CN>(pdid: String, _ fn: (A) -> ())  {
		_subscribe(pdid, fn: cumin(fn))
	}

	public func call(pdid: String, _ args: AnyObject..., handler fn: (() -> ())?)  {
		_call(pdid, args: args, fn: fn == nil ? nil: cumin(fn!))
	}

	public func call<A: CN>(pdid: String, _ args: AnyObject..., handler fn: ((A) -> ())?)  {
		_call(pdid, args: args, fn: fn == nil ? nil: cumin(fn!))
	}

	public func call<A: CL where A.Generator.Element : CN>(pdid: String, _ args: AnyObject..., handler fn: ((A) -> ())?)  {
		_call(pdid, args: args, fn: fn == nil ? nil: cumin(fn!))
	}

}

public func cumin<cumin>(fn: () -> ()) -> ([AnyObject]) -> () {
	return { (a: [AnyObject]) in fn() }
}

public func cumin<cumin>(fn: (A: CN) -> (A)) -> ([AnyObject]) -> () {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

public func cumin<cumin>(fn: (A: CL where A.Generator.Element : CN) -> (A)) -> ([AnyObject]) -> () {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

public func cumin<cumin>(fn: (R: CN) -> ()) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn() }
}

public func cumin<cumin>(fn: (R: CL where R.Generator.Element : CN) -> ()) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn() }
}

public func cumin<cumin>(fn: (A: CN, R: CN) -> (A)) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

public func cumin<cumin>(fn: (A: CN, R: CL where R.Generator.Element : CN) -> (A)) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

public func cumin<cumin>(fn: (A: CL, R: CN where A.Generator.Element : CN) -> (A)) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

public func cumin<cumin>(fn: (A: CL, R: CL where A.Generator.Element : CN, R.Generator.Element : CN) -> (A)) -> ([AnyObject]) -> (R) {
	return { (a: [AnyObject]) in fn(A.self <- a[0]) }
}

